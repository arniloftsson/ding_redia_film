<?php

/**
 * @file
 * Handles film from the libry film service.
 */

/**
 * Implements hook_menu().
 */
function ding_redia_film_menu() {
  $items = [];

  $items['admin/config/ding/ding_redia_film'] = [
    'title' => 'Libry Film Settings',
    'description' => 'Manage ding redia film module',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ding_redia_film_admin_form'],
    'access arguments' => ['administer site configuration'],
    'file' => 'includes/ding_redia_film.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  ];

  $items['film/libry/watch/%'] = [
    'title' => 'Libry Film watch',
    'page callback' => 'ding_redia_film_watch',
    'page arguments' => [3],
    'access arguments' => ['access content'],
  ];

  $items['film/libry/watchtrailer/%'] = [
    'title' => 'Libry Film watch trailer',
    'page callback' => 'ding_redia_film_watch_trailer',
    'page arguments' => [3],
    'access arguments' => ['access content'],
    'delivery callback' => 'ajax_deliver',
  ];

  $items['film/libry/checkout/%ting_object'] = [
    'page callback' => 'ding_redia_film_checkout_ajax',
    'page arguments' => [3],
    'delivery callback' => 'ajax_deliver',
    'access arguments' => ['access content'],
  ];

  $items['film/libry/loans'] = [
    'title' => 'Libry Film get loans',
    'page callback' => 'ding_redia_film_check_loans_ajax',
    'access arguments' => ['access content'],
  ];

  return $items;
}

/**
 * Implements hook_theme().
 */
function ding_redia_film_theme($existing, $type, $theme, $path) {
  return [
    'ding_redia_film_checkout' => [
      'variables' => [
        'checkout_confirmation' => '',
        'checkout_status' => '',
        'checkout_yes_button' => '',
        'checkout_cancel_button' => '',
      ],
      'template' => 'ding-redia-film-checkout',
      'path' => $path . '/templates',
    ],

    'ding_redia_film_watch' => [
      'variables' => [
        'object' => null,
      ],
      'template' => 'ding-redia-film-watch',
      'path' => $path . '/templates',
    ],

    'ding_redia_film_trailer' => [
      'variables' => [
        'trailers' => null,
      ],
      'template' => 'ding-redia-film-trailer',
      'path' => $path . '/templates',
    ],

    'ding_redia_film_loan' => [
      'variables' => [
        'loan' => null,
      ],
      'template' => 'ding-redia-film-loan',
      'path' => $path . '/templates',
    ],

    'ding_redia_film_status' => [
      'variables' => [
        'user' => null,
      ],
      'template' => 'ding-redia-film-status',
      'path' => $path . '/templates',
    ],
  ];
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ding_redia_film_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Watch film.
 *
 * @param $ting_object
 *   TODO: Missing this is true for almost all functions.
 *
 * @return array
 *   TODO: Missing this is true for almost all functions.
 */
function ding_redia_film_checkout_ajax($ting_object) {
  $commands = [];

  // Check if the logged-in user is a library user.
  global $user;

  if (!user_is_logged_in()) {
    // Trigger log-in (the checkout link will be triggered on success).
    $commands[] = ajax_command_ding_user_authenticate('');
  }
  elseif (!ding_user_is_provider_user($user)) {
    // Error not library user.
    $commands[] = ajax_command_ding_popup('ding_redia_film', t('Error'), '<p>' . t('Only library user can watch films.') . '</p>');
  }
  elseif (isset($creds['resident']) && $creds['resident']) {
    // Error not resident.
    $commands[] = ajax_command_ding_popup('ding_redia_film', t('Error'), '<p>' . t('Only residents in the municipal user can watch films.') . '</p>');
  }
  else {
    // Try to checkout film.
    try {
      $libry_id = $ting_object->getLocalId();
      $commands[] = ding_redia_film_can_user_checkout($libry_id);
    }
    catch (DingProviderAuthException $exception) {
      // The form may have thrown an Auth exception, so display login. (the
      // checkout link will be triggered on success).
      $commands[] = ajax_command_ding_user_authenticate('');
    }
    catch (Exception $exception) {
      // The form may have thrown an auth exception as the login may have
      // timed-out.
      // TODO check this (the checkout link will be triggered on success).
      $commands[] = ajax_command_ding_popup('ding_redia_film', t('Error'), '<p>' . t('Unknown error in trying to watch film, please contact the library.') . '</p>');

      // Log exception.
      watchdog_exception('ding_redia_film', $exception);
    }
  }
  // Return the ajax commands as an render array.
  return ['#type' => 'ajax', '#commands' => $commands];
}

/**
 * Checkout film.
 */
function ding_redia_film_can_user_checkout($libry_id) {
  $redia_user = ding_redia_film_get_user_controller();
  //Todo har already loaned the film.
  $token = ding_redia_film_get_user_token();
  $is_loggedin = $redia_user->login($token);

  if (!$is_loggedin) {
    return ajax_command_ding_popup('ding_redia_film', t('Error'), '<p>' . t('Cant log in to the film service.') . '</p>');
  }

  $is_checked_out = $redia_user->isCheckedOut($libry_id);
  if ($is_checked_out) {
    $url = url('film/libry/watch/' . $libry_id);
    $text = t('Your film is ready to watch. You will be redirected to the film in few seconds');
    $html = '<div id="js-redia-film-checked-out" data-film-url="' . $url . '">' . $text . '</div>';

    return ajax_command_ding_popup('ding_redia_film', t('Watch film'), $html);
  }

  $user_status = $redia_user->getUserEligible();
  if (!$user_status) {
    return ajax_command_ding_popup('ding_redia_film', t('Error'), '<p>' . t('Cant get credentials') . '</p>');
  }

  if ($redia_user->isElligble) {
    return ding_redia_film_create_checkout_popup($libry_id, $redia_user);
  } else {
    return ding_redia_film_user_not_elligble_popup($redia_user);
  }
}

/**
 * Checkout film popup.
 */
function ding_redia_film_user_not_elligble_popup($redia_user) {
  $replacements = [
    '%used_loans' =>  $redia_user->currentLoanCount,
    '%number_of_loans' =>  $redia_user->maxNumberOfLoans,
    '%period' =>$redia_user->loanDuration,
    '%next_loan_date' =>$redia_user->nextLoanDate,
  ];
  $text = t('You cant loan the film. You have used %used_loans loans out of %number_of_loans loans within %period days. Next date you can loan is %next_loan_date', $replacements);

  return ajax_command_ding_popup('ding_redia_film', t('Error'), '<p>' . $text  . '</p>');
}

/**
 * Create new film loan.
 */
function ding_redia_film_create_checkout_popup($libry_id , $redia_user) {
  $checkout_confirmation = t('Do you want to loan the film for 2 days');
  $replacements = [
    '%used_loans' =>  $redia_user->currentLoanCount,
    '%number_of_loans' =>  $redia_user->maxNumberOfLoans,
    '%period' => $redia_user->loanDuration,
  ];

  $checkout_status = t('If you loan the film you have used %used_loans loans out of %number_of_loans loans within %period days', $replacements);
  $checkout_yes_button = t('Yes');
  $checkout_cancel_button = t('Cancel');

  $watch_link = '/film/libry/watch/' . $libry_id;
  $options = ['query' => ['wantsToCheckout' => true]];
  $url = url($watch_link, $options);

  $variables = [
    'checkout_confirmation' => $checkout_confirmation,
    'checkout_status' => $checkout_status,
    // l() urlencodes our parameters so we make the link our selves.
    'checkout_yes_button' => '<a href="' . $url . '">'  . $checkout_yes_button . '</a>',
    'checkout_cancel_button' => $checkout_cancel_button,
  ];

  $html = theme('ding_redia_film_checkout', $variables);

  return ajax_command_ding_popup('ding_redia_film', t('Watch film'), $html);
}

/**
 * Watch film.
 */
function ding_redia_film_watch($id) {
  drupal_page_is_cacheable(FALSE);

  if (!user_is_logged_in()) {
    // Trigger log-in return here.
    $url = ding_redia_film_login_url(current_path());
    drupal_goto($url);
  }

  $token = ding_redia_film_get_user_token();
  $redia_user = ding_redia_film_get_user_controller();
  $object_controller = ding_redia_film_get_object_controller();

  $logged_in = $redia_user->login($token);
  If (!$logged_in) {
    drupal_set_message(t('Couldn\'t log into the film service. Please try again later or contact your library'));
    drupal_goto('<front>');
  }

  $parameters = drupal_get_query_parameters();
  $wants_to_checkout = false;
  if (isset($parameters['wantsToCheckout']) && $parameters['wantsToCheckout']) {
    $wants_to_checkout = true;
  }

  $libry_object = $object_controller->getObject($id);
  $is_checked_out = $redia_user->isCheckedOut($id);

  // We only check out if the user has confirmed.
  if (!$is_checked_out && $wants_to_checkout) {
     $object_controller->createLoan($redia_user, $libry_object);
  }
  elseif (!$is_checked_out && !$wants_to_checkout) {
    // Todo go to film.
    drupal_set_message(t('You need to check the film out before watching it'));
    drupal_goto('<front>');
  }

  $libry_object->token = $object_controller->getToken($redia_user);

  // In order to facilitate full screen view mode.
  drupal_add_http_header('Feature-Policy', 'fullscreen "self" https://play.libry.dk');
  drupal_add_http_header('Permissions-Policy', 'fullscreen=(self "https://play.libry.dk")');

  return theme('ding_redia_film_watch', ['object' => $libry_object]);
}

/**
 * Watch film trailer.
 */
function ding_redia_film_watch_trailer($id) {
  $commands = [];
  $trailers = [];
  $object_controller = ding_redia_film_get_object_controller();
  $libry_object = $object_controller->getObject($id);

  if (isset($libry_object->trailers)) {
    foreach ($libry_object->trailers as $trailer) {
      if ($trailer['format'] == 'MPEG4') {
        //Todo are there other formats?
        $trailers[] = [
          'source' => $trailer['watchUrl'],
          'format' => 'video/mp4',
        ];
      }
    }
  }
  $trailer_html = theme('ding_redia_film_trailer', ['trailers' => $trailers]);
  $commands[] = ajax_command_ding_popup('ding_redia_film', $libry_object->title, $trailer_html);

  return ['#type' => 'ajax', '#commands' => $commands];
}

/**
 * Implements hook_ding_entity_buttons().
 */
function ding_redia_film_ding_entity_buttons($type, $entity, $view_mode, $widget = 'default') {
  $buttons = [];
  if ($type == 'ding_entity' && ding_redia_film_is_libry_film($entity)) {
    $watch_button = [
      '#theme' => 'link',
      '#text' => t('Watch film'),
      '#path' => 'film/libry/checkout/' . $entity->id,
      '#options' => [
        'attributes' => [
          'class' => [
            'action-button',
            'watch-button',
            'use-ajax',
          ],
        ],
        'html' => FALSE,
      ],
      '#attached' => [
        'library' => [
          ['system', 'drupal.ajax'],
        ],
        'js' => [
          [
            'type' => 'file',
            'data' => drupal_get_path('module', 'ding_redia_film') . '/js/ding_redia_film.js',
          ],
        ],
      ],
    ];
    $buttons[] = $watch_button;

    if (ding_redia_film_has_trailer($entity->getLocalId())) {
      $trailer_button = $watch_button;
      $trailer_button['#text'] = t('Watch trailer');
      $trailer_button['#path'] = 'film/libry/watchtrailer/' . $entity->getLocalId();
      $trailer_button['#options']['attributes']['class'] = [
        'action-button',
        'watch-trailer-button',
        'use-ajax',
      ];
      $buttons[] = $trailer_button;
    }
  }

  return $buttons;
}

/**
 * Removes superfluous online button.
*/
function ding_redia_film_field_attach_view_alter(&$output, $context) {
  if ($context['entity_type'] == 'ting_object') {
    if (ding_redia_film_is_libry_film($context['entity'])) {
      // If the object is a libry film we don't need the online button.
      if (isset ($output['ding_entity_buttons']) && isset($output['ding_entity_buttons'][0])) {
        $buttons = $output['ding_entity_buttons'][0];
        foreach ($buttons as $key => $button) {
          if (isset($button['#type']) && $button['#type'] == 'html_tag' && $button['#value'] == t('See online')) {
            unset($output['ding_entity_buttons'][0][$key]);
          }
        }
      }
    }
  }
}

/**
 * Checks if object is a Libry film.
 */
function ding_redia_film_is_libry_film($entity) {
  return $entity->getAc_source() == 'Libry films';
}

/**
 * Checks if there is a trailer.
 *
 */
function ding_redia_film_has_trailer($id) {
  $object_controller = ding_redia_film_get_object_controller();

  return $object_controller->hasTrailer($id);
}

/**
 * Gets a object controller.
 */
function ding_redia_film_get_object_controller() {
  $client = _ding_redia_film_get_client();

  return new RediaFilmObjectsController($client);
}

/**
 * Gets a User controller.
 */
function ding_redia_film_get_user_controller() {
  $client = _ding_redia_film_get_client();

  return new RediaFilmUserController($client);
}

/**
 * Get Film service client.
 *
 * @return RediaFilmRequest $client
 *   Client to communicate with the service or NULL if not configured.
 */
function _ding_redia_film_get_client() {
  static $client;

  if (!isset($client)) {
    $log_debug = variable_get('ding_redia_film_enable_logging', FALSE);
    $logger = new RediaFilmLogger('ding_redia_film', $log_debug);

    $url = variable_get('ding_redia_film_server', 'https://bapps-be-staging.redia.dk/v2/');
    $api_key = variable_get('ding_redia_film_api_key', ''); // '12481632';
    $agency = 'DK-' . variable_get('ting_agency', '775100');
    $version = variable_get('ding_redia_film_version', 'ios_3.1.3');
    $language = variable_get('ding_redia_film_language', 'en');

    if (isset($url) && isset($api_key) && isset($version) && isset($agency) && isset($language)) {
      // We cache the customer id so we don't have to get it on every request.
      $customer_id = cache_get('ding_redia_film_customer_id');

      if (!$customer_id) {
        $client = new RediaFilmRequest($url, $api_key, $logger, $agency, $version, $language);
        cache_set('ding_redia_film_customer_id', $client->getCustomerId(), 'cache', REQUEST_TIME + 86400);
      } else {
        $client = new RediaFilmRequest($url, $api_key, $logger, $agency, $version, $language, $customer_id->data);
      }
    }
    else {
      watchdog('ding_redia_film', 'The ding_redia_film module is missing its configuration', NULL, WATCHDOG_ERROR);
    }
  }
  return $client;
}

/**
 * Generate a login url.
 *
 * @return string
 *   Login url.
 */
function ding_redia_film_login_url($destination = '') {
  return ding_provider_invoke(
    'openplatform_token',
    'login_url',
    ['query' => ['destination' => $destination]]
  );
}

/**
 * @TODO: Add description?
 *
 * @return mixed|void
 *
 * @throws \DingProviderDoesntImplement
 * @throws \DingProviderNoProvider
 */
function ding_redia_film_get_user_token() {
  $use_devel_token = variable_get('ding_redia_film_use_devel_token', FALSE);
  $devel_token = variable_get('ding_redia_film_development_token', FALSE);
  if ($use_devel_token && $devel_token) {
    return $devel_token;
  }

  return ding_provider_invoke('openplatform_token', 'for_user');
}

/**
 * Log debug information to watchdog.
 *
 * @param string $message
 *   Message to log.
 * @param array $variables
 *   Variables in the message.
 */
function _ding_redia_film_debug_log($message, array $variables = []) {
  if (variable_get('ding_redia_film_enable_logging', FALSE)) {
    watchdog('ding_redia_film', $message, $variables, WATCHDOG_DEBUG);
  }
}

/**
 * Get users film status.
 */
function ding_redia_film_get_status() {
  $redia_user =  ding_redia_film_get_user_controller();
  $token = ding_redia_film_get_user_token();
  $status = $redia_user->login($token);
  if ($status) {
    // Todo handle login failure.
    $redia_user->getUserEligible();
    drupal_add_js(drupal_get_path('module', 'ding_redia_film') . '/js/jquery.easypiechart.js');
    drupal_add_js(drupal_get_path('module', 'ding_redia_film') . '/js/ding_redia_film_status.js');
    file_put_contents("/var/www/drupalvm/drupal/web/debug/chart2.txt", print_r($redia_user, TRUE), FILE_APPEND);
    return theme('ding_redia_film_status', ['user' => $redia_user]);
  } else {
    return '';
  }
}

/**
 * Get users film loans.
 */
function ding_redia_film_get_loans() {
  $loan_items = '';

  $redia_user =  ding_redia_film_get_user_controller();
  $token = ding_redia_film_get_user_token();
  $status = $redia_user->login($token);
  // Todo handle login failure.
  $loans = $redia_user->getLoans();
  ding_redia_film_get_loans_from_well($loans);
  foreach ($loans as $loan) {
    $loan = ding_redia_film_prepare_loan_item($loan);
    $loan_items .= theme('ding_redia_film_loan', ['loan' => $loan]);
  }

  return $loan_items;
}

/**
 * Get data on the loans from the well.
 */
function ding_redia_film_get_loans_from_well(&$loans) {
  $query = ding_redia_film_make_well_query($loans);
  $results = ding_redia_film_search($query, 1, 50);
  foreach ($results as $ting_id => $object) {
    $id = $object->getLocalId();
    if (isset($loans[$id])) {
      $loans[$id]->tingObjectId = $ting_id;
      $image = theme('ting_object_cover', array('elements' => array('#object' => $object, '#image_style' => 'ting_search_carousel')));
      $loans[$id]->cover = $image;
    }
  }
}

/**
 * Get data on the loans from the well.
 */
function ding_redia_film_make_well_query($loans) {
  $query = '';
  $first_element = true;
  foreach ($loans as $loan) {
    if ($first_element) {
      $query .= $loan->id;
      $first_element = false;
    } else {
      $query .= ' OR ' . $loan->id;
    }
  }

  return $query;
}

/**
 * Find ting entities from a query.
 *
 * @param string $query
 *   Query to use.
 * @param int $start
 *   Offset to start from.
 * @param int $size
 *   Search chunk size to use.
 *
 * @return array
 *   Array of found ting entities (an array).
 */
function ding_redia_film_search($query, $start, $size) {
  $entities = [];

  $cqlDoctor = new TingSearchCqlDoctor($query);

  $sal_query = ting_start_query()
    ->withRawQuery($cqlDoctor->string_to_cql())
    ->withPage($start)
    ->withCount($size)
    ->withPopulateCollections(FALSE);

  $sal_query->reply_only = true;
  $results = $sal_query->execute();
  foreach ($results->openSearchResult->collections as $collection) {
    $object = $collection->getPrimary_object();
    $entities[$object->getId()] = $object;
  }

  return $entities;
}

/**
 * Watch film.
 */
function ding_redia_film_prepare_loan_item($loan) {
  //TOdo real cover.
  $devel_cover = variable_get('ding_redia_film_use_devel_cover', FALSE);
  if ($devel_cover) {
    $loan->cover = '<div  class="ting-cover" data-ting-cover-object-id="870970-basis:52181666" data-ting-cover-style="ting_search_carousel"></div>';
    drupal_add_js(drupal_get_path('module', 'ting_covers') . '/js/ting-covers.js');
  }

  $path = 'ting/object/' . $loan->tingObjectId;
  $loan->title = l($loan->title, $path);
  if (isset($loan->creators)) {
    // We only show the 3 first creators.
    $loan->creators = array_slice($loan->creators, 0, 3);
    $loan->creators = implode(', ', $loan->creators);
  }

  $loan->type = t('Film-net');
  $loan->loanDateLabel = t('Loan date:');
  $loan->expireDateLabel = t('Expires:');
  $watchButton = [
    '#theme' => 'link',
    '#text' => t('Keep watching'),
    '#path' => 'film/libry/watch/' . $loan->id,
    '#options' => [
      'attributes' => [
        'class' => [
          'action-button',
          'watch-button',
        ],
      ],
      'html' => FALSE,
    ],
  ];
  $loan->watchButton = drupal_render($watchButton);

  return $loan;
}

/**
 * Implements hook_page_alter().
 *
 * If the user is logged in we add javascript to check if they have film loans. We do it via ajac 
 * performance reasons.
 */
function ding_redia_film_page_alter(&$page) {
  // Check if the logged-in user is a library user.
  global $user;

  if (user_is_logged_in() && ding_user_is_provider_user($user)) {
    drupal_add_js(drupal_get_path('module', 'ding_redia_film') . '/js/ding_redia_film_loans.js');
    drupal_add_js([
      'dingRediaFilm' => [
        'url' => '/film/libry/loans',
      ],
    ], 'setting');
  }
}

/**
 * Get number off user loans.
 */
function ding_redia_film_check_loans_ajax() {
  $loan_count = 0;

  if (isset($_SESSION['ding_redia_film_loan_count'])) {
    $loan_count = $_SESSION['ding_redia_film_loan_count'];
  } else {
    $redia_user =  ding_redia_film_get_user_controller();
    $token = ding_redia_film_get_user_token();
    $status = $redia_user->login($token);
    if ($status) {
      $loans = $redia_user->getLoans();
      $loan_count = count($loans);
      $_SESSION['ding_redia_film_loan_count'] = $loan_count;
    }
  }
  if ($loan_count == 0) {
    drupal_json_output(null);
  } else {
    $loans = ddbasic_account_count_loans() - ddbasic_account_count_overdue_loans() + $loan_count;
    $output = '<span>' . t('Loans') . '<span class="menu-item-count">' . $loans . '</span></span>';
    drupal_json_output($output);

  }

  drupal_exit();
}

/**
 * Add site temple config.
 *
 * The film watch page takes over the whole page, so we use
 * site_template_search_blank and need to add a path to its configuration.
 */
function ding_redia_film_add_site_template_config() {
  // There is no hook we can use, so we interact directly with ctools module.
  if (module_exists('ctools')) {
    $argument = 'site_template*site_template_search_blank';

    $page = page_manager_get_page_cache('site_template');
    $handler = $page->handlers['site_template_search_blank'];

    if (isset($handler->conf['access'])) {
      $access  = $handler->conf['access'];
      if (isset($access['plugins'])) {
        if (isset($access['plugins'][0]['settings']) && isset($access['plugins'][0]['settings']['paths'])) {
          $paths = $access['plugins'][0]['settings']['paths'];
          $paths = trim($paths);
          $path_strings = explode("\n", $paths);

          if (!in_array('film/libry/watch/*', $path_strings)) {
            $paths .= "\nfilm/libry/watch/*";
          }

          $access['plugins'][0]['settings']['paths'] = $paths;

          page_manager_task_handler_ctools_access_set($argument, $access);

          // We get the page cache again to save the changes to the database.
          $page = page_manager_get_page_cache('site_template');
          $handler = $page->handlers['site_template_search_blank'];
          page_manager_save_task_handler($handler);
          page_manager_clear_page_cache('site_template');
        }
      }
    }
  }
}

/**
 * Add film loan and status panes.
 */
function ding_redia_film_add_film_loan_panes() {
  // There is no hook we can use, so we interact directly with ctools module.
  if (module_exists('ctools')) {
    // Add our panels to user loan page.
    ctools_get_plugins('page_manager', 'task_handlers', 'panel_context');

    $page = page_manager_get_page_cache('page');
    if (isset($page->handlers['page_user_loans_panel_context'])) {
      $handler = $page->handlers['page_user_loans_panel_context'];
    } else {
      // If we can't find the handler that means the configuration is in the code and
      // not in the database. So we need to find in a different way.
      // We need to call this so the page_manager_page_load_all() works.
      page_manager_get_task('page');
      $subtasks = page_manager_page_load_all();
      if (isset($subtasks['user_loans'])) {
        $loans_subtask = $subtasks['user_loans'];
        $handler = $loans_subtask->default_handlers['page_user_loans_panel_context'];
        // We have to save the subtask because it is not in the database already.
        page_manager_page_save($subtasks['user_loans']);
      }
    }

    $display = panels_panel_context_get_display($handler);
    $panes = ding_redia_film_loan_panes();
    $libry_loans_found = false;
    $libry_status_found = false;
    foreach ($display->content as $pane) {
      // Ckeck if the panes are already there.
      if ($pane->type == 'libryloans') {
        $libry_loans_found = true;
      }
      if ($pane->type == 'librystatus') {
        $libry_status_found = true;
      }
    }
    if (!$libry_loans_found) {
      $display->add_pane($panes['film_loans']);
    }
    if (!$libry_status_found) {
      $display->add_pane($panes['film_status']);
    }
    panels_save_display($display);
  }
}

/**
 * Definition off the film loan and status panes.
 *
 * @TODO: we not use feature module to define these panels?
 */
function ding_redia_film_loan_panes() {
  $panes = [];
  $pane = new stdClass();
  $pane->uuid = ctools_uuid_generate();
  $pane->pid = 'new-' . $pane->uuid;
  $pane->panel = 'main_content';
  $pane->type = 'libryloans';
  $pane->subtype = 'libryloans';
  $pane->shown = TRUE;
  $pane->access = [];
  $pane->configuration = [
    'context' => 'argument_entity_id:user_1',
    'override_title' => 0,
    'override_title_text' => '',
    'override_title_heading' => 'h2',
  ];
  $pane->cache = [];
  $pane->style = [
    'settings' => NULL,
  ];
  $pane->css = [
    'css_id' => '',
    'css_class' => 'default-account-panel-layout',
  ];
  $pane->extras = [];
  $pane->position = 1;
  $pane->locks = '';

  $panes['film_loans'] = $pane;

  $pane = new stdClass();
  $pane->uuid = ctools_uuid_generate();
  $pane->pid = 'new-' . $pane->uuid;
  $pane->panel = 'main_content';
  $pane->type = 'librystatus';
  $pane->subtype = 'librystatus';
  $pane->shown = TRUE;
  $pane->access = [];
  $pane->configuration = [
    'context' => 'argument_entity_id:user_1',
    'override_title' => 0,
    'override_title_text' => '',
    'override_title_heading' => 'h2',
  ];
  $pane->cache = [];
  $pane->style = [
    'settings' => NULL,
  ];
  $pane->css = [
    'css_id' => '',
    'css_class' => 'default-account-panel-layout',
  ];
  $pane->extras = [];
  $pane->position = 2;
  $pane->locks = '';

  $panes['film_status'] = $pane;
  return $panes;
}
