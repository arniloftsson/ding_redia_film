<?php

/**
 * @file
 * Handles film from the libry film service.
 */


/**
 * Implements hook_menu().
 */
function ding_redia_film_menu() {
  $items = [];

  $items['admin/config/ding/ding_redia_film'] = [
    'title' => 'Libry Film Settings',
    'description' => 'Manage ding redia film module',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ding_redia_film_admin_form'],
    'access arguments' => ['administer site configuration'],
    'file' => 'includes/ding_redia_film.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  ];

  $items['film/libry/watch/%'] = [
    'title' => 'Libry Film watch',
    'page callback' => 'ding_redia_film_watch',
    'access arguments' => ['access content'],
  ];

  $items['film/libry/watchtrailer/%'] = [
    'title' => 'Libry Film watch trailer',
    'page callback' => 'ding_redia_film_watch_trailer',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  $items['film/libry/checkout/%ting_object'] = [
    'page callback' => 'ding_redia_film_checkout_ajax',
    'page arguments' => [3],
    'delivery callback' => 'ajax_deliver',
    'access arguments' => ['access content'],
  ];

  return $items;
}


/**
 * Implements hook_theme().
 */
function ding_redia_film_theme($existing, $type, $theme, $path) {
  return [
    'ding_redia_film_checkout' => [
      'variables' => [
        'checkout_confirmation' => '',
        'checkout_status' => '',
        'checkout_yes_button' => '',
        'checkout_cancel_button' => '',
        'watch_link' => '',
      ],
      'template' => 'ding-redia-film-checkout',
      'path' => $path . '/templates',
    ],

    'ding_redia_film_watch' => [
      'variables' => [
        'object' => null,
      ],
      'template' => 'ding-redia-film-watch',
      'path' => $path . '/templates',
    ],

    'ding_redia_film_trailer' => [
      'variables' => [
        'trailers' => null,
      ],
      'template' => 'ding-redia-film-trailer',
      'path' => $path . '/templates',
    ],

    'ding_redia_film_loan' => [
      'variables' => [
        'loan' => null,
      ],
      'template' => 'ding-redia-film-loan',
      'path' => $path . '/templates',
    ],

    'ding_redia_film_status' => [
      'variables' => [
        'user' => null,
      ],
      'template' => 'ding-redia-film-status',
      'path' => $path . '/templates',
    ],
  ];
}

  /**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ding_redia_film_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Watch film.
 */
function ding_redia_film_checkout_ajax($ting_object) {
  $commands = array();

  // Check if the logged-in user is a library user.
  global $user;
  if (!user_is_logged_in()) {
    // Trigger log-in (the reservation link will be triggered on success).
    $commands[] = ajax_command_ding_user_authenticate('');
  }
  elseif (!ding_user_is_provider_user($user)) {
    // Error not library user.
    $commands[] = ajax_command_ding_popup('ding_redia_film', t('Error'), '<p>' . t('Only library user can watch films.') . '</p>');
  }
  elseif (false) {
    // Check if resident.
    $commands[] = ajax_command_ding_popup('ding_redia_film', t('Error'), '<p>' . t('Only residents in the municipal user can watch films.') . '</p>');
  }
  else {
    // Try to make reservation.
    // Start off customized section.
    try {
      $checkout = ding_redia_film_can_user_checkout($ting_object);
      $commands[] = ajax_command_ding_popup('ding_redia_film', t($checkout['title']), $checkout['html']);
    }
    catch (DingProviderAuthException $exception) {
      // The form may have thrown an Auth exception, so display login. (the
      // checkout link will be triggered on success).
      $commands[] = ajax_command_ding_user_authenticate('');
    }
    catch (Exception $exception) {
      // The form may have thrown an auth exception as the login may have
      // timed-out.
      // TODO check this (the reservation link will be triggered on success).
      $commands[] = ajax_command_ding_popup('ding_redia_film', t('Error'), '<p>' . t('Unknown error in trying to watch film, please contact the library.') . '</p>');

      // Log exception.
      watchdog_exception('ding_redia_film', $exception);
    }
  }

  // Return the ajax commands as an render array.
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Watch film.
 */
function ding_redia_film_can_user_checkout($ting_object) {
  $checkout = [];
  $client = _ding_redia_film_get_client();
  $redia_user = new RediaFilmUser($client);
  $is_loggedin = $redia_user->login("dYUvEdnrlDwfrkiaXBryPbCheMGzQOtsdOmZGbbB");
  if (!$is_loggedin) {
    $checkout['title'] = 'Error';
    $checkout['html'] = '<p>' . t('Cant log in to the film service.') . '</p>';
    return $checkout;
  }

  $user_status = $redia_user->getUserEligble();
  if (!$user_status) {
    $checkout['title'] = 'Error';
    $checkout['html'] = '<p>' . t('Cant get credentials') . '</p>';
    return $checkout;
  }
  file_put_contents("/var/www/drupalvm/drupal/web/debug/checkout5.txt", print_r($redia_user, TRUE), FILE_APPEND);
  if ($redia_user->isElligble) {
    return ding_redia_film_create_checkout_popup($ting_object, $redia_user);
  } else {
    return ding_redia_film_user_not_elligble_popup($redia_user);
  }
}

/**
 * Watch film.
 */
function ding_redia_film_user_not_elligble_popup($redia_user) {
  $checkout = [];
  $replacements = [
    '%used_loans' =>  $redia_user->currentLoanCount,
    '%number_of_loans' =>  $redia_user->maxNumberOfLoans,
    '%period' =>$redia_user->loanDuration,
    '%next_loan_date' =>$redia_user->nextLoanDate,
  ];
  $text = t('You cant loan the film. You have used %used_loans loans out of %number_of_loans loans within %period days. Next date you can loan is %next_loan_date', $replacements);
  $checkout['title'] = 'Error';
  $checkout['html'] = '<p>' . $text  . '</p>';;
  return $checkout;
}

/**
 * Watch film.
 */
function ding_redia_film_create_checkout_popup($ting_object, $redia_user) {
  $checkout = [];
  $checkout_confirmation = t('Do you want to loan the film for 2 days');
  $replacements = [
    '%used_loans' =>  $redia_user->currentLoanCount,
    '%number_of_loans' =>  $redia_user->maxNumberOfLoans,
    '%period' =>$redia_user->loanDuration,
  ];
  $checkout_status = t('If you loan the film you have used %used_loans loans out of %number_of_loans loans within %period days', $replacements);
  $checkout_yes_button = t('Yes');
  $checkout_cancel_button = t('Cancel');
  $watch_link = '/film/libry/watch/' . $ting_object->id;

  $variables = [
    'checkout_confirmation' => $checkout_confirmation,
    'checkout_status' => $checkout_status,
    'checkout_yes_button' => $checkout_yes_button,
    'checkout_cancel_button' => $checkout_cancel_button,
    'watch_link' => $watch_link
  ];

  $checkout['title'] = 'Watch film';
  $checkout['html'] = theme('ding_redia_film_checkout', $variables);
  return $checkout;
}

/**
 * Watch film.
 */
function ding_redia_film_watch() {
  // $client = _ding_redia_film_get_client();

  $object = null;
  $client = _ding_redia_film_get_client();
  $redia_user = new RediaFilmUser($client);
  $token = 'dYUvEdnrlDwfrkiaXBryPbCheMGzQOtsdOmZGbbB';
  $status = $redia_user->login($token);
  $elligbible = $redia_user->getUserEligble();
  $libry_object = new RediaFilmObjects($client);
  $object = $libry_object->getObject('187922471992');
  $object->token = $libry_object->getToken($redia_user);
  $libry_object->createLoan($redia_user, $object);
  file_put_contents("/var/www/drupalvm/drupal/web/debug/login4.txt", print_r($object, TRUE), FILE_APPEND);
  //file_put_contents("/var/www/drupalvm/drupal/web/debug/login3.txt", print_r($elligbible, TRUE), FILE_APPEND);
  //$customerid = $client->getCustomerId();
  //file_put_contents("/var/www/drupalvm/drupal/web/debug/login5.txt", print_r($customerid , TRUE), FILE_APPEND);
  file_put_contents("/var/www/drupalvm/drupal/web/debug/film1.txt", print_r(theme('ding_redia_film_watch', ['object' => $object]), TRUE), FILE_APPEND);
  return theme('ding_redia_film_watch', ['object' => $object]);
}


/**
 * Watch film trailer.
 */
function ding_redia_film_watch_trailer() {
  $trailers = [];
  $client = _ding_redia_film_get_client();
  $libry_object = new RediaFilmObjects($client);
  $object = $libry_object->getObject('187922471992');
  if (isset($object->trailers)) {
    foreach ($object->trailers as $trailer) {
      if ($trailer['format'] == 'MPEG4') { //Todo are there other formats?
        $trailers[] = [
          'source' => $trailer['watchUrl'],
          'format' => 'video/mp4',
        ];
      }
    }
  }
  
  return theme('ding_redia_film_trailer', ['trailers' => $trailers]);
}

/**
 * Implements hook_ding_entity_buttons().
 */
function ding_redia_film_ding_entity_buttons($type, $entity, $view_mode, $widget = 'default') {
  $buttons = [];
  file_put_contents("/var/www/drupalvm/drupal/web/debug/film3.txt", print_r($type, TRUE), FILE_APPEND);
  if ($type == 'ding_entity') {
    $watch_button = [
      '#theme' => 'link',
      '#text' => t('Watch film'),
      '#path' => 'film/libry/checkout/' . $entity->id,
      '#options' => [
        'attributes' => [
          'class' => [
            'action-button',
            'watch-button',
            'use-ajax',
          ],
        ],
        'html' => FALSE,
      ],
      '#attached' => [
        'library' => [
          ['system', 'drupal.ajax'],
        ],
        'js' => [
          [
            'type' => 'file',
            'data' => drupal_get_path('module', 'ding_redia_film') . '/js/ding_redia_film.js',
          ],
        ],
      ],
    ];

    $buttons[] = $watch_button;

    $trailer_button = $watch_button;
    $trailer_button['#text'] = t('Watch trailer');
    $trailer_button['#path'] = 'film/libry/watchtrailer/' . $entity->id;
    $trailer_button['#options']['attributes']['class'] = ['action-button', 'watch-trailer-button'];
    $buttons[] = $trailer_button;
  }
  return $buttons;
}

/**
 * Get Film service client.
 *
 * @return \RediaFilmRequest|NULL
 *   Client to communicate with the service or NULL if not configured.
 */
function _ding_redia_film_get_client() {
  static $client;

  if (!isset($client)) {

    $log_debug = variable_get('ding_redia_film_enable_logging', FALSE);
    $logger = new RediaFilmLogger('ding_redia_film', $log_debug);
    $url = variable_get('ding_redia_film_server', 'https://bapps-be-staging.redia.dk/v2/');
    $api_key = variable_get('ding_redia_film_api_key', ''); // '12481632';
    $agency = 'DK-775100'; //variable_get('ting_agency', '');
    $version = variable_get('ding_redia_film_version', 'ios_3.1.3');
    $language = variable_get('ding_redia_film_language', 'en');

    if (isset($url) && isset($api_key) && isset($version) && isset($agency) && isset($language)) {
      $customer_id = cache_get('ding_redia_film_customer_id');
      if (!$customer_id) {
        $client = new RediaFilmRequest($url, $api_key, $logger, $agency, $version, $language);
        cache_set('ding_redia_film_customer_id', $client->getCustomerId(), 'cache', REQUEST_TIME + 86400);
      } else {
        $client = new RediaFilmRequest($url, $api_key, $logger, $agency, $version, $language, $customer_id->data);
        file_put_contents("/var/www/drupalvm/drupal/web/debug/login6.txt", print_r($customer_id, TRUE), FILE_APPEND);
      }
    }
    else {
      watchdog('ding_redia_film', 'The ding_redia_film module is missing its configuration', NULL, WATCHDOG_ERROR);
    }
  }

  return $client;
}



/**
 * Generate a login url which can be used as a prop for React apps.
 *
 * @return string
 *   Login url.
 */
function ding_redia_film_login_url() {
  return ding_provider_invoke(
    'openplatform_token',
    'login_url',
    ['query' => ['destination' => '']]
  );
}

/**
 * Authenticates users with the libry film service.
 *
 * Outputs JSON response with token, status message and username
 */
function ding_redia_film_authenticate() {
  global $user;

  $film_service_token = null;
  $username = '';

  // Ding Varnish will cache requests even for logged in users. Mark this
  // page as not cacheable to bypass Varnish. Uses should not get each others
  // token due to a cached response.
  drupal_page_is_cacheable(FALSE);

  $parameters = drupal_get_query_parameters();

  if (isset($parameters['customerid']) && isset($parameters['apikey'])) {
    $customer_id = $parameters['customerid'];
    $api_key = $parameters['apikey'];

    // Check if the logged in user is a library user.
    if (!user_is_logged_in()) {
      $status = 'not_logged_in';
    } elseif (!ding_user_is_provider_user($user)) {
      $status = 'not_library_user';
    } else {
      $libry_token = ding_redia_film_handle_authentication($customer_id, $api_key);
      if (isset($libry_token)) {
        $status = 'logged_in';
        $film_service_token = $libry_token;
        $creds = ding_user_get_creds();
        if (isset($creds['name'])) {
          $username = $creds['name'];
        }
      } else {
        $status = 'no_token';
      }
    }
  } else {
    $status = 'missing_parameters';
  }

  $output = ['token' => $film_service_token, 'status' => $status, 'username' => $username];
  drupal_json_output($output);
}

/**
 * @TODO: Missing description...
 *
 * @param $user_id
 *
 * @param $api_key
 *
 * @return string|null
 */
function ding_redia_film_handle_authentication($user_id, $api_key) {
  $token = ding_provider_invoke('openplatform_token', 'for_user');
  //return ding_redia_film_get_film_service_token($token, $user_id, $api_key);
}




/**
 * Log debug information to watchdog.
 *
 * @param string $message
 *   Message to log.
 * @param array $variables
 *   Variables in the message.
 */
function _ding_redia_film_debug_log($message, array $variables = []) {
  if (variable_get('ding_redia_film_enable_logging', FALSE)) {
    watchdog('ding_redia_film', $message, $variables, WATCHDOG_DEBUG);
  }
}

/**
 * Watch film.
 */
function ding_redia_film_get_loans() {
  $loan_items = '';
  $client = _ding_redia_film_get_client();
  $redia_user = new RediaFilmUser($client);
  $loans = $redia_user->getLoans();
  foreach ($loans as $loan) {
    $loan = ding_redia_film_prepare_loan_item($loan);
    $loan_items .= theme('ding_redia_film_loan', ['loan' => $loan]);
  }
  
  return $loan_items;
}

/**
 * Watch film.
 */
function ding_redia_film_prepare_loan_item($loan) {
  $loan->cover = '<img alt="Andrey Bogatyrev, Nikita Rozhdestvenskiy, Konnstantin Simonov: The red ghost" src="http://ddbcms.test/sites/default/files/styles/ding_primary_large/public/ting/covers/ODcwOTcwLWJhc2lzOjYxNjQ0MTEz.jpg?itok=Szxb4aYv">';
  $path = 'ting/object/870970-basis:61644113'; //TOdo make real path
  $loan->title = l($loan->title, $path);
  if (isset($loan->creators)) {
    $loan->creators = array_slice($loan->creators, 0, 3);
    $loan->creators = implode(', ', $loan->creators);
  }
  $loan->type = t('Film-net');
  $loan->loanDateLabel = t('Loan date:');
  $loan->expireDateLabel = t('Expires:');
  $watchButton = [
    '#theme' => 'link',
    '#text' => t('Keep watching'),
    '#path' => 'film/libry/watch/' . $loan->id,
    '#options' => [
      'attributes' => [
        'class' => [
          'action-button',
          'watch-button',
        ],
      ],
      'html' => FALSE,
    ],
  ];
  $loan->watchButton = drupal_render($watchButton);
  return $loan;
}





/**
 * Watch film trailer.
 */
function ding_redia_film_add_site_template_config() {
  // There is no hook we can use so we interact directly with ctools module.
  if (module_exists('ctools')) {
    $access  = [];
    $argument = 'site_template*site_template_search_blank';

    $page = page_manager_get_page_cache('site_template');
    $handler = $page->handlers['site_template_search_blank'];

    if (isset($handler->conf['access'])) {
      $access  = $handler->conf['access'];
      if (isset($access['plugins'])) {
        if (isset($access['plugins'][0]['settings']) && isset($access['plugins'][0]['settings']['paths'])) {
          $paths = $access['plugins'][0]['settings']['paths'];
          $paths = trim($paths);
          $path_strings = explode("\n", $paths);

          if (!in_array('film/libry/watch/*', $path_strings)) {
            $paths .= "\nfilm/libry/watch/*";
          }
          if (!in_array('film/libry/watchtrailer/*', $path_strings)) {
            $paths .= "\nfilm/libry/watchtrailer/*";
          }
          $access['plugins'][0]['settings']['paths'] = $paths;

          page_manager_task_handler_ctools_access_set($argument, $access);

          // We get the page cache again to save the changes to the database
          $page = page_manager_get_page_cache('site_template');
          $handler = $page->handlers['site_template_search_blank'];
          page_manager_save_task_handler($handler);
          page_manager_clear_page_cache('site_template');
        }
      }
    }
  }
}

/**
 * Add film loan and status panes.
 */
function ding_redia_film_add_film_loan_panes() {
  // There is no hook we can use so we interact directly with ctools module.
  if (module_exists('ctools')) {
    // Add our panels to user loan page.
    ctools_get_plugins('page_manager', 'task_handlers', 'panel_context');

    $page = page_manager_get_page_cache('page');
    if (isset($page->handlers['page_user_loans_panel_context'])) {
      $handler = $page->handlers['page_user_loans_panel_context'];
    } else {
      // If we can't find the handler that means the configuration is in the code and 
      // not in the database. So we need to find in a different way.

      // We need to call this so the page_manager_page_load_all() works.
      $task = page_manager_get_task('page');
      $subtasks = page_manager_page_load_all();
      if (isset($subtasks['user_loans'])) {
        $loans_subtask = $subtasks['user_loans'];
        $handler = $loans_subtask->default_handlers['page_user_loans_panel_context'];
        // We have to save the subtask because it is not in the database already.
        page_manager_page_save($subtasks['user_loans']);
      }
    }

    $display = panels_panel_context_get_display($handler);
    $panes = ding_redia_film_loan_panes();
    $libry_loans_found = false;
    $libry_status_found = false;
    foreach ($display->content as $pane) {
      // Ckeck if the panes are already there.
      if ($pane->type == 'libryloans') {
        $libry_loans_found = true;
      }
      if ($pane->type == 'librystatus') {
        $libry_status_found = true;
      }
    }
    if (!$libry_loans_found) {
      $display->add_pane($panes['film_loans']);
    }
    if (!$libry_status_found) {
      $display->add_pane($panes['film_status']);
    }
    panels_save_display($display);
  }

}

/**
 * Definition off the film loan and status panes.
 */
function ding_redia_film_loan_panes() {
  $panes = [];
  $pane = new stdClass();
  $pane->uuid = ctools_uuid_generate();
  $pane->pid = 'new-' . $pane->uuid;
  $pane->panel = 'main_content';
  $pane->type = 'libryloans';
  $pane->subtype = 'libryloans';
  $pane->shown = TRUE;
  $pane->access = [];
  $pane->configuration = [
    'context' => 'argument_entity_id:user_1',
    'override_title' => 0,
    'override_title_text' => '',
    'override_title_heading' => 'h2',
  ];
  $pane->cache = [];
  $pane->style = [
    'settings' => NULL,
  ];
  $pane->css = [
    'css_id' => '',
    'css_class' => 'default-account-panel-layout',
  ];
  $pane->extras = [];
  $pane->position = 1;
  $pane->locks = '';

  $panes['film_loans'] = $pane;

  $pane = new stdClass();
  $pane->uuid = ctools_uuid_generate();
  $pane->pid = 'new-' . $pane->uuid;
  $pane->panel = 'main_content';
  $pane->type = 'librystatus';
  $pane->subtype = 'librystatus';
  $pane->shown = TRUE;
  $pane->access = [];
  $pane->configuration = [
    'context' => 'argument_entity_id:user_1',
    'override_title' => 0,
    'override_title_text' => '',
    'override_title_heading' => 'h2',
  ];
  $pane->cache = [];
  $pane->style = [
    'settings' => NULL,
  ];
  $pane->css = [
    'css_id' => '',
    'css_class' => 'default-account-panel-layout',
  ];
  $pane->extras = [];
  $pane->position = 2;
  $pane->locks = '';

  $panes['film_status'] = $pane;
  return $panes;
}
