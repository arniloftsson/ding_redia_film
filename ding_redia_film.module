<?php

/**
 * @file
 * Handles film from the libry film service.
 */

use FBS\Model\Login;

define('DING_REDIA_FILM_SERVER', 'https://bapps-be-staging.redia.dk/v2/');

/**
 * Implements hook_menu().
 */
function ding_redia_film_menu() {
  $items = [];

  $items['admin/config/ding/ding_redia_film'] = [
    'title' => 'Libry Film Settings',
    'description' => 'Manage ding redia film module',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ding_redia_film_admin_form'],
    'access arguments' => ['administer site configuration'],
    'file' => 'includes/ding_redia_film.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  ];

  $items['film/libry/watch/%'] = [
    'title' => 'Libry Film watch',
    'page callback' => 'ding_redia_film_watch',
    'access arguments' => ['access content'],
  ];

  $items['film/libry/watchtrailer/%'] = [
    'title' => 'Libry Film watch trailer',
    'page callback' => 'ding_redia_film_watch_trailer',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  $items['film/libry/checkout/%ting_object'] = [
    'page callback' => 'ding_redia_film_checkout_ajax',
    'page arguments' => [3],
    'delivery callback' => 'ajax_deliver',
    'access arguments' => ['access content'],
  ];

  return $items;
}


/**
 * Implements hook_theme().
 */
function ding_redia_film_theme($existing, $type, $theme, $path)
{
  return[
    'ding_redia_film_init' => [
      'variables' => ['options' => NULL],
      'template' => 'ding-redia-film-init',
      'path' => $path . '/templates',]
    ];
  }

/**
 * Watch film.
 */
function ding_redia_film_checkout_ajax($ting_object) {
  $commands = array();

  // Check if the logged-in user is a library user.
  global $user;
  if (!user_is_logged_in()) {
    // Trigger log-in (the reservation link will be triggered on success).
    $commands[] = ajax_command_ding_user_authenticate('');
  }
  elseif (!ding_user_is_provider_user($user)) {
    // Error not library user.
    $commands[] = ajax_command_ding_popup('ding_redia_film', t('Error'), '<p>' . t('Only library user can watch films.') . '</p>');
  }
  elseif (false) {
    // Check if resident.
    $commands[] = ajax_command_ding_popup('ding_redia_film', t('Error'), '<p>' . t('Only residents in the municipal user can watch films.') . '</p>');
  }
  else {
    // Try to make reservation.
    // Start off customized section.
    try {
      file_put_contents("/var/www/drupalvm/drupal/web/debug/film4.txt", print_r($ting_object , TRUE), FILE_APPEND);
      file_put_contents("/var/www/drupalvm/drupal/web/debug/film5.txt", print_r("Ramt" , TRUE), FILE_APPEND);
      $commands[] = ajax_command_ding_popup('ding_redia_film', t('Watch film'), 'Test');
      // $reservable = new DingReservationReservableEntity($entity);
      // if ($fast != null) {
      //   $interest_period = variable_get('ding_custom_reservation_secondary_reservation_button_interest_period', 60);
      //   $form_state = [];
      //   $form_state['values']['provider_options']['interest_period'] = $interest_period;
      //   $form_state['values']['reservation_type'] = DING_CUSTOM_RESERVATION_SECONDARY_BUTTON;

      //   drupal_form_submit('ding_reservation_reserve_form', $form_state, $reservable);
      //   $status_messages = theme('status_messages');
      //   $commands[] = ajax_command_ding_popup('ding_reservation', t('Reservation'), $status_messages, array('refresh' => TRUE));
      // } else {
      //   $form = ding_provider_get_form('ding_reservation_reserve_form', $reservable, FALSE);
      //   $commands[] = ajax_command_ding_popup('ding_reservation', t('Reservation'), render($form));
      // }
      // End off customized section.
    }
    catch (DingProviderAuthException $exception) {
      // The form may have thrown an Auth exception, so display login. (the
      // checkout link will be triggered on success).
      $commands[] = ajax_command_ding_user_authenticate('');
    }
    catch (Exception $exception) {
      // The form may have thrown an auth exception as the login may have
      // timed-out.
      // TODO check this (the reservation link will be triggered on success).
      $commands[] = ajax_command_ding_popup('ding_redia_film', t('Error'), '<p>' . t('Unknown error in trying to watch film, please contact the library.') . '</p>');

      // Log exception.
      watchdog_exception('ding_redia_film', $exception);
    }
  }

  // Return the ajax commands as an render array.
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Watch film.
 */
function ding_redia_film_watch() {

  $agency = variable_get('ting_agency', '');

  $client = _ding_redia_film_get_client();
  $session = $client->login("dYUvEdnrlDwfrkiaXBryPbCheMGzQOtsdOmZGbbB");
  file_put_contents("/var/www/drupalvm/drupal/web/debug/redia5.txt", print_r($session, TRUE), FILE_APPEND);
  return "watch";
}

/**
 * Watch film trailer.
 */
function ding_redia_film_watch_trailer() {

  $agency = variable_get('ting_agency', '');
  //_ding_redia_film_get_client();
  return "watch trailer";
}

/**
 * Implements hook_ding_entity_buttons().
 */
function ding_redia_film_ding_entity_buttons($type, $entity, $view_mode, $widget = 'default') {
  $buttons = [];
  file_put_contents("/var/www/drupalvm/drupal/web/debug/film3.txt", print_r($type , TRUE), FILE_APPEND);
  if ($type == 'ding_entity') {
        $watch_button = [
          '#theme' => 'link',
          '#text' => t('Watch film'),
          '#path' => 'film/libry/checkout/' . $entity->id,
          '#options' => [
            'attributes' => [
              'class' => [
                'action-button',
                'watch-button',
                'use-ajax',
              ],
            ],
            'html' => FALSE,
          ],
          '#attached' => [
            'library' => [
              ['system', 'drupal.ajax'],
            ],
          ],
        ];

        $buttons[] = $watch_button;

        $trailer_button = $watch_button;
        $trailer_button['#text'] = t('Watch trailer');
        $trailer_button['#path'] = 'film/libry/watchtrailer/' . $entity->id;
        $trailer_button['#options']['attributes']['class'] = ['action-button', 'watch-trailer-button'];
        $buttons[] = $trailer_button;

  }
  return $buttons;
}

/**
 * Get Film service client.
 *
 * @return \RediaFilmRequest|NULL
 *   Client to communicate with the service or NULL if not configured.
 */
function _ding_redia_film_get_client() {
  static $client;

  if (!isset($client)) {

    $log_debug = variable_get('ding_redia_film_enable_logging', FALSE);
    $logger = new RediaFilmLogger('ding_redia_film', $log_debug);
    $url = variable_get('ding_redia_film_server', DING_REDIA_FILM_SERVER);
    $api_key = '12481632';
    $agency = 'DK-775100'; //variable_get('ting_agency', '');
    $version = "2";
    $language = "en";

    if (isset($url) && isset($api_key)) {
      $client = new RediaFilmRequest($url, $api_key, $logger, $agency, $version, $language);
    }
    else {
      watchdog('ding_redia_film', 'The ding_redia_film module is missing its configuration', NULL, WATCHDOG_ERROR);
    }
  }

  return $client;
}



/**
 * Generate a login url which can be used as a prop for React apps.
 *
 * @return string
 *   Login url.
 */
function ding_redia_film_login_url() {
  return ding_provider_invoke(
    'openplatform_token',
    'login_url',
    ['query' => ['destination' => '']]
  );
}

/**
 * Authenticates users with the libry film service.
 *
 * Outputs JSON response with token, status message and username
 */
function ding_redia_film_authenticate() {
  global $user;

  $film_service_token = null;
  $username = '';

  // Ding Varnish will cache requests even for logged in users. Mark this
  // page as not cacheable to bypass Varnish. Uses should not get each others
  // token due to a cached response.
  drupal_page_is_cacheable(FALSE);

  $parameters = drupal_get_query_parameters();

  if (isset($parameters['customerid']) && isset($parameters['apikey'])) {
    $customer_id = $parameters['customerid'];
    $api_key = $parameters['apikey'];

    // Check if the logged in user is a library user.
    if (!user_is_logged_in()) {
      $status = 'not_logged_in';
    } elseif (!ding_user_is_provider_user($user)) {
      $status = 'not_library_user';
    } else {
      $libry_token = ding_redia_film_handle_authentication($customer_id, $api_key);
      if (isset($libry_token)) {
        $status = 'logged_in';
        $film_service_token = $libry_token;
        $creds = ding_user_get_creds();
        if (isset($creds['name'])) {
          $username = $creds['name'];
        }
      } else {
        $status = 'no_token';
      }
    }
  } else {
    $status = 'missing_parameters';
  }

  $output = ['token' => $film_service_token, 'status' => $status, 'username' => $username];
  drupal_json_output($output);
}

/**
 * @TODO: Missing description...
 *
 * @param $user_id
 *
 * @param $api_key
 *
 * @return string|null
 */
function ding_redia_film_handle_authentication($user_id, $api_key) {
  $token = ding_provider_invoke('openplatform_token', 'for_user');
  //return ding_redia_film_get_film_service_token($token, $user_id, $api_key);
}




/**
 * Log debug information to watchdog.
 *
 * @param string $message
 *   Message to log.
 * @param array $variables
 *   Variables in the message.
 */
function _ding_redia_film_debug_log($message, array $variables = []) {
  if (variable_get('ding_redia_film_enable_logging', FALSE)) {
    watchdog('ding_redia_film', $message, $variables, WATCHDOG_DEBUG);
  }
}
