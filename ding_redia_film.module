<?php

/**
 * @file
 * Handles film from the libry film service.
 */

use GuzzleHttp\Client;
use GuzzleHttp\Cookie\CookieJar;

define('DING_REDIA_FILM_SERVER', 'https://bapps-be-staging.redia.dk/v2/');

/**
 * Implements hook_menu().
 */
function ding_redia_film_menu() {
  $items = [];

  $items['admin/config/ding/ding_redia_film'] = [
    'title' => 'Libry Film Settings',
    'description' => 'Manage ding redia film module',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ding_redia_film_admin_form'],
    'access arguments' => ['administer site configuration'],
    'file' => 'includes/ding_redia_film.admin.inc',
    'type' => MENU_LOCAL_TASK,
  ];

  $items['film/libry'] = [
    'title' => 'Libry Film',
    'page callback' => 'ding_redia_film_render',
    'access arguments' => ['access content'],
  ];

  $items['film/libry/authenticate'] = [
    'title' => 'Libry Film Authenticate',
    'page callback' => 'ding_redia_film_authenticate',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Renders reacts components.
 */
function ding_redia_film_render() {
  $login_url = ding_redia_film_login_url();
  $agency = variable_get('ting_agency', '');
  $options = ' loginurl: "' . $login_url . '", agency: "' . $agency . '"';

  // @TODO: You should not load react/react-dom here it should be part of the application build by Redia. Also to
  //        prevent new release of the CMS when react is updated in the application.
  // @TODO: This should be moved into a template and render array returned.

  $content = '
  <div id="root"></div>
  <script
    crossorigin
    src="https://unpkg.com/react@17/umd/react.production.min.js"
    ></script>
    <script
    crossorigin
      src="https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"
      ></script>
      <script
    type="module"
      src="https://film.libry.dk/libry-film-widget-app.umd.js"
      ></script>
      <script>
    window.addEventListener("DOMContentLoaded", (event) => {
    window.LibryFilm.init({ 
      containerId: "root",
      baseUrl: "/film/libry",' .
    $options . ' 
    });
  });
  </script>
        ';
  return $content;
}


/**
 * Generate a login url which can be used as a prop for React apps.
 *
 * @return string
 *   Login url.
 */
function ding_redia_film_login_url() {
  // @TODO: Should check which provider provides token and not hardcode openplatform.
  return ding_provider_invoke(
    'openplatform_token',
    'login_url',
    ['query' => ['destination' => '']]
  );
}

/**
 * Authenticates users with the libry film service.
 *
 * Outputs JSON response with token, status message and username
 */
function ding_redia_film_authenticate() {
  global $user;

  $film_service_token = null;
  $username = '';

  // Ding Varnish will cache requests even for logged in users. Mark this
  // page as not cacheable to bypass Varnish. Uses should not get each others
  // token due to a cached response.
  drupal_page_is_cacheable(FALSE);

  $parameters = drupal_get_query_parameters();

  if (isset($parameters['customerid']) && isset($parameters['apikey'])) {
    $customer_id = $parameters['customerid'];
    $api_key = $parameters['apikey'];

    // Check if the logged in user is a library user.
    if (!user_is_logged_in()) {
      $status = 'not_logged_in';
    } elseif (!ding_user_is_provider_user($user)) {
      $status = 'not_library_user';
    } else {
      $libry_token = ding_redia_film_handle_authentication($customer_id, $api_key);
      if (isset($libry_token)) {
        $status = 'logged_in';
        $film_service_token = $libry_token;
        $creds = ding_user_get_creds();
        if (isset($creds['name'])) {
          $username = $creds['name'];
        }
      } else {
        $status = 'no_token';
      }
    }
  } else {
    $status = 'missing_parameters';
  }

  $output = ['token' => $film_service_token, 'status' => $status, 'username' => $username];
  drupal_json_output($output);
}

/**
 * @TODO: Missing description...
 *
 * @param $user_id
 *
 * @param $api_key
 *
 * @return string|null
 */
function ding_redia_film_handle_authentication($user_id, $api_key) {
  // @TODO: Should check which provider provides token and not hardcode openplatform.
  $token = ding_provider_invoke('openplatform_token', 'for_user');

  return ding_redia_film_get_film_service_token($token, $user_id, $api_key);
}


/**
 * Set additional parameters to ting request.
 *
 * @param string $token
 *   Single sign on token.
 *
 * @param string $customer_id
 *   Id off the library which site the user is visting.
 *
 * @return string $libry_token
 *   Returns token from the libry service.
 */
function ding_redia_film_get_film_service_token($token, $customer_id, $api_key) {
  $libry_token = NULL;

  try {
    $client = new Client();
    $jar = new CookieJar();

    $options = [
      'json' => [
        "jsonrpc" => "2.0",
        "id" => 1,
        "method" => "watch.webLogin",
        "params" => [$api_key, $customer_id, $token]
      ],
      'cookies' => $jar
    ];
    _ding_redia_film_debug_log('Call options to libry service: %options', ['%options' => json_encode($options)]);

    $film_service_server = variable_get('ding_redia_film_server', DING_REDIA_FILM_SERVER);
    $response = $client->post($film_service_server, $options);
    $content = $response->getBody()->getContents();

    $jar->toArray();
    $json = json_decode($content, true);

    _ding_redia_film_debug_log('Response from libry service: %json', ['%json' => $content]);

    if (isset($json['result']) && isset($json['result']['session'])) {
      $libry_token = $json['result']['session'];
    }
  } catch (Exception $e) {
    // @TODO: Is the user informed that something went wrong?
    watchdog('ding_redia_film', 'Unable to retrieve token from Libry service: %message', ['%message' => $e->getMessage()], WATCHDOG_ERROR);
  }
  return $libry_token;
}

/**
 * Log debug information to watchdog.
 *
 * @param string $message
 *   Message to log.
 * @param array $variables
 *   Variables in the message.
 */
function _ding_redia_film_debug_log($message, array $variables = []) {
  // @TODO: Missing ding_redia_film.install with hook_uninstall to clean up variables.
  if (variable_get('ding_redia_film_enable_logging', FALSE)) {
    watchdog('ding_redia_film', $message, $variables, WATCHDOG_DEBUG);
  }
}
